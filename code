"""
Student portion of Zombie Apocalypse mini-project
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
EMPTY = 0 
FULL = 1
FOUR_WAY = 0
EIGHT_WAY = 1
OBSTACLE = 5
HUMAN = 6
ZOMBIE = 7


class Apocalypse(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)

        if obstacle_list != None:
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []
        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._zombie_list = []
        self._human_list = []
        
    def add_zombie(self, row, col):
        
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append((row, col))
       
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)     
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        for zombies in self._zombie_list:
            if self._zombie_list == []:
                return
            yield zombies      

    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append((row, col))     
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        for human in self._human_list:
            if self._human_list == []:
                return
            yield human
    
  
        
    def compute_distance_field(self, entity_type):
        """
        Function computes and returns a 2D distance field
        Distance at member of entity_list is zero
        Shortest paths avoid obstacles and use four-way distances
        """
        # Create a new grid VISITED of the same size as the original grid and initialize its cells to e empty
        visited = [[EMPTY for dummy_col in range(self._grid_width)]
                       for dummy_row in range(self._grid_height)]
        
        # Create a 2D list DISTANCE_FIELD of the same size as the original grid.
        distance_field = [[self._grid_height * self._grid_width \
                           for dummy_col in range(self._grid_width)] \
                          for dummy_row in range(self._grid_height)]
        
        # Create a queue boundary that is a copy of either the zombie list or the human list. 
        boundary = poc_queue.Queue()
       
        if entity_type == HUMAN:
            entities = self._human_list
        else:
            entities = self._zombie_list           
                        
        for entity in entities:
            # boundary bopy of either the zombie list or the human list.
            boundary.enqueue(entity)
            # for cells in boundary, initialize visited to be FULL and distance to be zero
            visited[entity[0]][entity[1]] = FULL
            distance_field[entity[0]][entity[1]] = 0
                
        while len(boundary) > 0:            
            cell = boundary.dequeue()
            neighbors = poc_grid.Grid.four_neighbors(self,cell[0], cell[1])        
            for neighbor in neighbors:
                if visited[neighbor[0]][neighbor[1]] == EMPTY and poc_grid.Grid.is_empty(self, neighbor[0], neighbor[1]):
                    visited[neighbor[0]][neighbor[1]] = FULL
                    boundary.enqueue(neighbor)
                    distance_field[neighbor[0]][neighbor[1]] = distance_field[cell[0]][cell[1]] + 1

        return distance_field
    
    def move_humans(self, zombie_distance_field):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """
        update_list = []
        for human in self._human_list:
            neighbors =  poc_grid.Grid.eight_neighbors(self, human[0], human[1])            
            max_move = [human]
            
            for neighbor in neighbors:
                if poc_grid.Grid.is_empty(self, neighbor[0], neighbor[1]):
                    neighbor_distance = zombie_distance_field[neighbor[0]][neighbor[1]]
                    if neighbor_distance > zombie_distance_field[max_move[0][0]][max_move[0][1]]:
                        max_move = []
                        max_move.append(neighbor)
                    elif neighbor_distance == zombie_distance_field[max_move[0][0]][max_move[0][1]]:
                        max_move.append(neighbor)               
                    
            update_list.append(random.choice(max_move))
          
        self._human_list = update_list
        return self._human_list
                                         
    def move_zombies(self, human_distance_field):
        """
        Function that moves zombies towards humans, no diagonal moves
        are  allowed
        """
        update_list = []
        for zombie in self._zombie_list:
            neighbors =  poc_grid.Grid.four_neighbors(self, zombie[0], zombie[1])            
            min_move = [zombie]
            
            for neighbor in neighbors:
                if poc_grid.Grid.is_empty(self, neighbor[0], neighbor[1]):
                    neighbor_distance = human_distance_field[neighbor[0]][neighbor[1]]
                    if neighbor_distance < human_distance_field[min_move[0][0]][min_move[0][1]]:
                        min_move = []
                        min_move.append(neighbor)
                    elif neighbor_distance == human_distance_field[min_move[0][0]][min_move[0][1]]:
                        min_move.append(neighbor)               
                    
            update_list.append(random.choice(min_move))
          
        self._zombie_list = update_list
        return self._zombie_list 

# Start up gui for simulation - You will need to write some code above
# before this will work without errors

poc_zombie_gui.run_gui(Apocalypse(30, 40))
